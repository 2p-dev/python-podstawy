lst = [123, 4.5, 'hello', True, 6+7j]  
>>> lst
[123, 4.5, 'hello', True, (6+7j)]
>>> len(lst)   # Length
5
>>> type(lst)
<class 'list'>

# Indeksowanie - wybieranie elementu listy
>>> lst[0]
123
>>> lst[-1]   # Ujemne indeksy od końca
(6+7j)
# Przypisanie z indeksowaniem
>>> lst[2] = 'world'   # Przypisanie wartości do elementu o indeksie
>>> lst
[123, 4.5, 'world', True, (6+7j)]

# "Slicing" aby otrzymać fragment listy (również listę)
>>> lst[0:2]
[123, 4.5]
>>> lst[:3]   # To samo co [0:3]
[123, 4.5, 'world']
>>> lst[2:]   # To samo co [2: len(lst)]
['world', True, (6+7j)]
>>> lst[::2]   # Przejście co 2 elementy
[123, 'world']
>>> lst[::-1]  # Ujemny krok aby odwrócić listę
['world', 4.5, 123]
# Przypisanie ze slicingiem
>>> lst[2:4]
['world', True]     # 2-elementowa podlista
>>> lst[2:4] = 0    # Nie można przypisać wartości skalarnej do listy
TypeError: can only assign an iterable
>>> lst[2:4] = [1, 2, 'a', 'b']   # Ale można przypisać inną listę 
>>> lst
[123, 4.5, 1, 2, 'a', 'b', (6+7j)]
>>> lst[1:3] = []   # Usunięcie podlisty
>>> lst
[123, 2, 'a', 'b', (6+7j)]
>>> lst[::2] = ['x', 'y', 'z']   # Można użyć kroku
>>> lst
['x', 2, 'y', 'b', 'z']
>>> lst[::2] = [1, 2, 3, 4]      # Ale trzeba zastąpić listą o tym samym rozmiarze
ValueError: attempt to assign sequence of size 4 to extended slice of size 3

# Operatory: in, +, *, del
>>> 'x' in lst
True
>>> 'a' in lst
False
>>> lst + [6, 7, 8]   # Łączenie
['x', 2, 'y', 'b', 'z', 6, 7, 8]
>>> lst * 3           # Powtórzenie
['x', 2, 'y', 'b', 'z', 'x', 2, 'y', 'b', 'z', 'x', 2, 'y', 'b', 'z']
>>> del lst[1]        # Usunięcie elementu z wykorzystaniem indeksowania
>>> lst
['x', 'y', 'b', 'z']
>>> del lst[::2]      # Usunięcie części listy
>>> lst
['y', 'z']

# Listy mogą być zagnieżdżone
>>> lst = [123, 4.5, ['a', 'b', 'c']]
>>> lst
[123, 4.5, ['a', 'b', 'c']]
>>> lst[2]
['a', 'b', 'c']